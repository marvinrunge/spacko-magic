
type Player @aws_iam @aws_cognito_user_pools @aws_api_key {
  id: ID!
  name: String
  life: Int
  poison: Int
  energy: Int
  other: Int
  SavedDecks(filter: ModelDeckFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDeckConnection
  ActiveDeck: Deck
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  playerActiveDeckId: ID
  owner: String
}

type Deck @aws_iam @aws_cognito_user_pools @aws_api_key {
  id: ID!
  Cards(filter: ModelCardFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCardConnection
  name: String
  playerID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

type Card @aws_iam @aws_cognito_user_pools @aws_api_key {
  id: ID!
  url: String
  type: String
  scryfall_uri: String
  place: String
  counter: Int
  position: Float
  cmc: Int
  tapped: Boolean
  deckID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPlayerConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Player]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPlayerFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  life: ModelIntInput
  poison: ModelIntInput
  energy: ModelIntInput
  other: ModelIntInput
  and: [ModelPlayerFilterInput]
  or: [ModelPlayerFilterInput]
  not: ModelPlayerFilterInput
  playerActiveDeckId: ModelIDInput
}

type Query {
  getPlayer(id: ID!): Player @aws_api_key @aws_iam @aws_cognito_user_pools
  listPlayers(filter: ModelPlayerFilterInput, limit: Int, nextToken: String): ModelPlayerConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncPlayers(filter: ModelPlayerFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPlayerConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getDeck(id: ID!): Deck @aws_api_key @aws_iam @aws_cognito_user_pools
  listDecks(filter: ModelDeckFilterInput, limit: Int, nextToken: String): ModelDeckConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncDecks(filter: ModelDeckFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDeckConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getCard(id: ID!): Card @aws_api_key @aws_iam @aws_cognito_user_pools
  listCards(filter: ModelCardFilterInput, limit: Int, nextToken: String): ModelCardConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncCards(filter: ModelCardFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCardConnection @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelPlayerConditionInput {
  name: ModelStringInput
  life: ModelIntInput
  poison: ModelIntInput
  energy: ModelIntInput
  other: ModelIntInput
  and: [ModelPlayerConditionInput]
  or: [ModelPlayerConditionInput]
  not: ModelPlayerConditionInput
  playerActiveDeckId: ModelIDInput
}

input CreatePlayerInput {
  id: ID
  name: String
  life: Int
  poison: Int
  energy: Int
  other: Int
  _version: Int
  playerActiveDeckId: ID
}

input UpdatePlayerInput {
  id: ID!
  name: String
  life: Int
  poison: Int
  energy: Int
  other: Int
  _version: Int
  playerActiveDeckId: ID
}

input DeletePlayerInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPlayer(input: CreatePlayerInput!, condition: ModelPlayerConditionInput): Player @aws_api_key @aws_iam @aws_cognito_user_pools
  updatePlayer(input: UpdatePlayerInput!, condition: ModelPlayerConditionInput): Player @aws_api_key @aws_iam @aws_cognito_user_pools
  deletePlayer(input: DeletePlayerInput!, condition: ModelPlayerConditionInput): Player @aws_api_key @aws_iam @aws_cognito_user_pools
  createDeck(input: CreateDeckInput!, condition: ModelDeckConditionInput): Deck @aws_api_key @aws_iam @aws_cognito_user_pools
  updateDeck(input: UpdateDeckInput!, condition: ModelDeckConditionInput): Deck @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteDeck(input: DeleteDeckInput!, condition: ModelDeckConditionInput): Deck @aws_api_key @aws_iam @aws_cognito_user_pools
  createCard(input: CreateCardInput!, condition: ModelCardConditionInput): Card @aws_api_key @aws_iam @aws_cognito_user_pools
  updateCard(input: UpdateCardInput!, condition: ModelCardConditionInput): Card @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteCard(input: DeleteCardInput!, condition: ModelCardConditionInput): Card @aws_api_key @aws_iam @aws_cognito_user_pools
}

type Subscription {
  onCreatePlayer(owner: String): Player @aws_subscribe(mutations: ["createPlayer"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdatePlayer(owner: String): Player @aws_subscribe(mutations: ["updatePlayer"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeletePlayer(owner: String): Player @aws_subscribe(mutations: ["deletePlayer"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateDeck(owner: String): Deck @aws_subscribe(mutations: ["createDeck"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateDeck(owner: String): Deck @aws_subscribe(mutations: ["updateDeck"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteDeck(owner: String): Deck @aws_subscribe(mutations: ["deleteDeck"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateCard(owner: String): Card @aws_subscribe(mutations: ["createCard"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateCard(owner: String): Card @aws_subscribe(mutations: ["updateCard"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteCard(owner: String): Card @aws_subscribe(mutations: ["deleteCard"]) @aws_api_key @aws_iam @aws_cognito_user_pools
}

type ModelDeckConnection @aws_iam @aws_cognito_user_pools @aws_api_key {
  items: [Deck]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDeckFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  playerID: ModelIDInput
  and: [ModelDeckFilterInput]
  or: [ModelDeckFilterInput]
  not: ModelDeckFilterInput
}

input ModelDeckConditionInput {
  name: ModelStringInput
  playerID: ModelIDInput
  and: [ModelDeckConditionInput]
  or: [ModelDeckConditionInput]
  not: ModelDeckConditionInput
}

input CreateDeckInput {
  id: ID
  name: String
  playerID: ID!
  _version: Int
}

input UpdateDeckInput {
  id: ID!
  name: String
  playerID: ID
  _version: Int
}

input DeleteDeckInput {
  id: ID!
  _version: Int
}

type ModelCardConnection @aws_iam @aws_cognito_user_pools @aws_api_key {
  items: [Card]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCardFilterInput {
  id: ModelIDInput
  url: ModelStringInput
  type: ModelStringInput
  scryfall_uri: ModelStringInput
  place: ModelStringInput
  counter: ModelIntInput
  position: ModelFloatInput
  cmc: ModelIntInput
  tapped: ModelBooleanInput
  deckID: ModelIDInput
  and: [ModelCardFilterInput]
  or: [ModelCardFilterInput]
  not: ModelCardFilterInput
}

input ModelCardConditionInput {
  url: ModelStringInput
  type: ModelStringInput
  scryfall_uri: ModelStringInput
  place: ModelStringInput
  counter: ModelIntInput
  position: ModelFloatInput
  cmc: ModelIntInput
  tapped: ModelBooleanInput
  deckID: ModelIDInput
  and: [ModelCardConditionInput]
  or: [ModelCardConditionInput]
  not: ModelCardConditionInput
}

input CreateCardInput {
  id: ID
  url: String
  type: String
  scryfall_uri: String
  place: String
  counter: Int
  position: Float
  cmc: Int
  tapped: Boolean
  deckID: ID!
  _version: Int
}

input UpdateCardInput {
  id: ID!
  url: String
  type: String
  scryfall_uri: String
  place: String
  counter: Int
  position: Float
  cmc: Int
  tapped: Boolean
  deckID: ID
  _version: Int
}

input DeleteCardInput {
  id: ID!
  _version: Int
}

